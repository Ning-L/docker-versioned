name: Build & Push UMR

on:
  workflow_run:
    workflows: 
      - "Create UMR-Release"
      - "Build & Push Core"
    branches: main
    types: completed
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          CONTENT=$(jq -r 'tostring' 05-matrix/github_action_matrix_all_umr.json)
          echo ::set-output name=matrix::"${CONTENT}"
          echo "${CONTENT}"
  build:
    runs-on: ubuntu-latest
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Docker images
        run: |
          BAKE_JSON=04-bakefiles/${{ matrix.r_version }}.docker-bake.json
          for itarget in $(jq '.group[].${{ matrix.group }}[].targets[]' -r ${BAKE_JSON}); do
            docker buildx bake \
              --file ${BAKE_JSON} \
              --set=*.labels.org.opencontainers.image.revision=${GITHUB_SHA} \
              --push ${itarget}; 
          done
  generate_matrix_server:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      matrix: ${{ steps.set-matrix-server.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix-server
        run: |
          CONTENT=$(jq -r 'tostring' 05-matrix/github_action_matrix_all_server.json)
          echo ::set-output name=matrix::"${CONTENT}"
          echo "${CONTENT}"
  build_server:
    runs-on: ubuntu-latest
    needs: generate_matrix_server
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix_server.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Docker images
        run: |
          BAKE_JSON=04-bakefiles/${{ matrix.r_version }}.docker-bake.json
          for itarget in $(jq '.group[].${{ matrix.group }}[].targets[]' -r ${BAKE_JSON}); do 
            docker buildx bake \
              --file ${BAKE_JSON} \
              --set=*.labels.org.opencontainers.image.revision=${GITHUB_SHA} \
              --push ${itarget};
          done
